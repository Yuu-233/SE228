
// Standard extensions get all permissions by default

grant codeBase "file:${{java.ext.dirs}}/*" {
    permission java.security.AllPermission;
};

// default permissions granted to all domains

grant {
    // Allows any thread to stop itself using the java.lang.Thread.stop()
    // method that takes no argument.
    // Note that this permission is granted by default only to remain
    // backwards compatible.
    // It is strongly recommended that you either remove this permission
    // from this policy file or further restrict it to code sources
    // that you specify, because Thread.stop() is potentially unsafe.
    // See the API specification of java.lang.Thread.stop() for more
    // information.
    permission java.lang.RuntimePermission "stopThread";

    // allows anyone to listen on dynamic ports
    permission java.net.SocketPermission "localhost:0", "listen";

    // "standard" properies that can be read by anyone

    permission java.util.PropertyPermission "java.version", "read";
    permission java.util.PropertyPermission "java.vendor", "read";
    permission java.util.PropertyPermission "java.vendor.url", "read";
    permission java.util.PropertyPermission "java.class.version", "read";
    permission java.util.PropertyPermission "os.name", "read";
    permission java.util.PropertyPermission "os.version", "read";
    permission java.util.PropertyPermission "os.arch", "read";
    permission java.util.PropertyPermission "file.separator", "read";
    permission java.util.PropertyPermission "path.separator", "read";
    permission java.util.PropertyPermission "line.separator", "read";

    permission java.util.PropertyPermission "java.specification.version", "read";
    permission java.util.PropertyPermission "java.specification.vendor", "read";
    permission java.util.PropertyPermission "java.specification.name", "read";

    permission java.util.PropertyPermission "java.vm.specification.version", "read";
    permission java.util.PropertyPermission "java.vm.specification.vendor", "read";
    permission java.util.PropertyPermission "java.vm.specification.name", "read";
    permission java.util.PropertyPermission "java.vm.version", "read";
    permission java.util.PropertyPermission "java.vm.vendor", "read";
    permission java.util.PropertyPermission "java.vm.name", "read";
};

grant {
    permission java.lang.management.ManagementPermission "monitor";

    // java.io.FilePermission
    permission java.io.FilePermission "/Users/rudeigerc/Developer/bookstore/-", "read";
    permission java.io.FilePermission "/Users/rudeigerc/Library/Caches/IntelliJIdea2018.1/tomcat/-", "read, write, delete";
    permission java.io.FilePermission "/usr/local/Cellar/tomcat/-", "read";
    permission java.io.FilePermission "/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/-", "read";
    permission java.io.FilePermission "/Users/rudeigerc/Developer/bookstore/-", "write";

    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
    permission java.util.logging.LoggingPermission "control";
    permission java.util.PropertyPermission "*", "read";
    permission java.util.PropertyPermission "java.security.policy", "write";
    permission java.lang.RuntimePermission "*";

    permission javax.management.MBeanPermission "*", "registerMBean";
    permission javax.management.MBeanTrustPermission "register";

    permission java.net.SocketPermission "[0:0:0:0:0:0:0:1]:0", "accept, resolve";
    permission java.net.SocketPermission "127.0.0.1:*", "accept, connect, resolve";

    permission bookstore.permission.AdultPermission "Adult", "restrict";

    permission javax.management.MBeanServerPermission "*";
    permission javax.management.MBeanPermission "*", "unregisterMBean, queryNames";
    permission java.sql.SQLPermission "deregisterDriver";
};
